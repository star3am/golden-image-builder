#!/bin/bash -x
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
echo BEGIN $(date '+%Y-%m-%d %H:%M:%S')

echo -e '\e[38;5;198m'"++++ Add ~/.local/bin to PATH"
export PATH="/home/ubuntu/.local/bin:$PATH"
sudo --preserve-env=PATH -u ubuntu env | grep PATH

# install some base tools
DEBIAN_FRONTEND=noninteractive apt-get update
DEBIAN_FRONTEND=noninteractive apt-get --assume-yes install apt-transport-https ca-certificates curl unzip jq gnupg-agent software-properties-common awscli curl python3.9 python3-pip
# determine which cloud we are in and set some variables
if [[ $(sudo dmidecode -s bios-version) =~ .*\.amazon ]]
then
  echo "This is AWS"
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  VM_IP=$(curl -s 'https://api.ipify.org?format=text')
elif [[ $(sudo dmidecode -s bios-version) =~ Google ]]
then
  echo "This is GCP"
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  VM_IP=$(curl -s 'https://api.ipify.org?format=text')
else
  echo "This is Azure"
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  VM_IP=$(curl -s 'https://api.ipify.org?format=text')
fi

# https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md
# https://github.com/ansible/awx

echo -e '\e[38;5;198m'"++++ Installing Python3 dependencies"
DEBIAN_FRONTEND=noninteractive apt-get install -y docker-compose python3-venv swapspace

usermod -aG docker ubuntu

update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1 --force
update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 --force
python -V
pip -V

DEBIAN_FRONTEND=noninteractive apt-get --assume-yes autoremove
DEBIAN_FRONTEND=noninteractive apt-get --assume-yes clean
rm -rf /var/lib/apt/lists/partial

echo -e '\e[38;5;198m'"++++ Add user vagrant to the docker group"
usermod -aG docker ubuntu

echo -e '\e[38;5;198m'"++++ Clone https://github.com/ansible/awx.git into /opt/aw"
rm -rf /opt/awx
mkdir -p /opt/awx
chown -R ubuntu:ubuntu /opt/awx
cd /opt/awx

# Using my fork of awx to minimise disruptive changes from upstream
sudo -u ubuntu git clone https://github.com/star3am/awx.git /opt/awx
#sudo -u ubuntu git clone https://github.com/ansible/awx.git /opt/awx
# Below branch has problems
#sudo -u ubuntu git clone --branch 19.5.1 https://github.com/ansible/awx.git /opt/awx

echo -e '\e[38;5;198m'"++++ Install Ansible and AWX dependencies with pip"
sudo --preserve-env=PATH -u ubuntu python -m pip install docker --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install docker-compose --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install ansible --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install ansible-lint --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install passlib --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install wheel --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install pywinrm --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install requests --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install docker --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install molecule --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install junit_xml --quiet
sudo --preserve-env=PATH -u ubuntu python -m pip install awxkit --quiet

echo -e '\e[38;5;198m'"++++ Set permissions on /var/run/docker.sock"
chmod 666 /var/run/docker.sock
systemctl restart docker

echo -e '\e[38;5;198m'"++++ Running make clean"
sudo --preserve-env=PATH -u ubuntu make clean

echo -e '\e[38;5;198m'"++++ Running make docker-compose-build"
sudo --preserve-env=PATH -u ubuntu make docker-compose-build

echo -e '\e[38;5;198m'"++++ Running make docker-compose COMPOSE_UP_OPTS=-d"
sudo --preserve-env=PATH -u ubuntu make docker-compose COMPOSE_UP_OPTS=-d

echo -e '\e[38;5;198m'"++++ Running docker exec tools_awx_1 make clean-ui ui-devel"
sudo --preserve-env=PATH -u ubuntu docker exec tools_awx_1 make clean-ui ui-devel

echo -e '\e[38;5;198m'"++++ Create superuser for AWX and setting password"
sudo --preserve-env=PATH -u ubuntu docker exec tools_awx_1 awx-manage createsuperuser --username=${TOWER_USERNAME} --email=admin@example.com --noinput
sudo --preserve-env=PATH -u ubuntu docker exec tools_awx_1 awx-manage update_password --username=${TOWER_USERNAME} --password="${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Loading AWX demo data"
sudo --preserve-env=PATH -u ubuntu docker exec tools_awx_1 awx-manage create_preload_data

# BUG: https://github.com/ansible/awx/issues/10099 - update project fails with source control update error: 'overlay' is not supported over overlayfs
echo -e '\e[38;5;198m'"++++ Enable mount_program in /etc/containers/storage.conf"
sudo --preserve-env=PATH -u ubuntu docker exec tools_awx_1 sed -i "/mount_program =/s/^#//g" /etc/containers/storage.conf

echo -e '\e[38;5;198m'"++++ Restart tools_awx_1 container"
sudo --preserve-env=PATH -u ubuntu docker restart tools_awx_1

sleep 60

echo -e '\e[38;5;198m'"++++ Adding /home/ubuntu/.tower_cli.cfg and doing awx-cli login"
cat <<EOF | sudo --preserve-env=PATH -u ubuntu tee /home/ubuntu/.tower_cli.cfg
[general]
verify_ssl = False
insecure = false
description_on = False
host = $INSTANCE_IP:8043
color = True
oauth_token =
certificate =
use_token = False
format = human
username = ${TOWER_USERNAME}
verbose = True
password = ${TOWER_PASSWORD}
EOF

echo -e '\e[38;5;198m'"++++ Add ~/.local/bin to PATH"
export PATH="/home/ubuntu/.local/bin:$PATH"
sudo --preserve-env=PATH -u ubuntu env | grep PATH
sudo --preserve-env=PATH -u ubuntu which awx

echo -e '\e[38;5;198m'"++++ Create projects ansible-role-example-role"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx projects create --organization 'Default' --scm_update_on_launch true --scm_url https://github.com/star3am/ansible-role-example-role --scm_type git --name ansible-role-example-role --description ansible-role-example-role --monitor --wait --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Create job_templates ansible-role-example-role"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx job_templates create --name ansible-role-example-role --description ansible-role-example-role --job_type run --inventory 'Demo Inventory' --project 'ansible-role-example-role' --become_enabled true --ask_limit_on_launch true --ask_tags_on_launch true --playbook site.yml --ask_limit_on_launch true --ask_tags_on_launch true --monitor --wait --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Add credentials ansible"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx credentials create --credential_type 'Machine' --organization 'Default' --name 'ansible' --inputs '{"username": "ansible", "password": "${TOWER_PASSWORD}"}' --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Associate credential with job_templates Demo Job Template"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx job_templates disassociate --credential "Demo Credential" --name "Demo Job Template" --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx job_templates associate --credential "ansible" --name "Demo Job Template" --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Associate credential with job_templates ansible-role-example-role"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx job_templates associate --credential "ansible" --name "ansible-role-example-role" --monitor --wait --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Update the project"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx projects update "Demo Project" --wait --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Disable project update"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx projects modify 'Demo Project' --wait --scm_update_on_launch false --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Modify job_templates Demo Job Template"
sudo --preserve-env=PATH -u ubuntu /home/ubuntu/.local/bin/awx job_templates modify "Demo Job Template" --name "Demo Job Template" --ask_limit_on_launch true --ask_tags_on_launch true --conf.insecure --conf.host https://$INSTANCE_IP:8043 --conf.username ${TOWER_USERNAME} --conf.password "${TOWER_PASSWORD}"

echo -e '\e[38;5;198m'"++++ Configure SSH to allow login with password"
sed -i "s/PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
systemctl reload ssh

echo -e '\e[38;5;198m'"++++ Done"

echo -e '\e[38;5;198m'"++++ AWX https://$INSTANCE_IP:8043 and login with Username: ${TOWER_USERNAME} and Password: ${TOWER_PASSWORD}"

echo END $(date '+%Y-%m-%d %H:%M:%S')
